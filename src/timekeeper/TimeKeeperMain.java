/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TimeKeeperMain.java
 *
 * Created on Jun 12, 2010, 5:25:53 PM
 */

package timekeeper;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;
import java.util.Calendar;
//import java.awt.*;
//import java.awt.event.WindowAdapter;
//import java.awt.event.WindowEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import tewin.*;

/**
 *
 * @author E0051024
 */
public class TimeKeeperMain extends javax.swing.JFrame implements Runnable,ActionListener
{

    private Integer buttonCount;
    private javax.swing.JToggleButton currentTask;
    private long startTime;
    private Thread updater;
    private boolean isRunning;
    private LogKeeper log;
    private LogReport report;
    private int loadedRecordID;
    private int loadedLogID;
    private ArrayList<Integer> reportIDs;
    private ArrayList<Object[]> reportLines;
    private ArrayList<Object[]> loadedReportLines;
    private ArrayList<Object[]> loadedTEdata;
    private boolean loadedRecord;
    private int ydim;
    private int xdim;
    private int currentLines;
    private Utilities u;
    private ArrayList<Object> tasks;
    private ArrayList<Object> times;
    private Calendar now;
    private int preExistingJobMaxIndex;

    /** Creates new form TimeKeeperMain */


    public TimeKeeperMain() {
        isRunning = false;
        loadedRecord = false;
        loadedRecordID = -1;
        loadedLogID = -1;
        initComponents();
        this.bClear.setEnabled(false);
        this.bLog.setEnabled(false);
        this.bReport.setEnabled(false);
        this.bSave.setEnabled(false);
        //ADD DELETION OF OLD RECORDS
        buttonCount = -1;
        log = new LogKeeper();
        report = new LogReport(log.getEvents());
        reportLines = new ArrayList<Object[]>();
        loadedReportLines = new ArrayList<Object[]>();
        loadedTEdata = new ArrayList<Object[]>();
        reportIDs = new ArrayList<Integer>();
        dReport.setSize(650, 100);
        now = java.util.Calendar.getInstance();
        u = new Utilities();
        preExistingJobMaxIndex = -1;
        cleanOutOldRecords();
    }

    public final void cleanOutOldRecords()
    {
        DataConnection dc = new DataConnection();
        Calendar cal = Calendar.getInstance();
        dc.connect();
        dc.delTimeKeeperHistorical(cal);
        dc.closeConnection();
    }

    public void actionPerformed(ActionEvent e){

        System.out.println(e.getSource().toString());
        javax.swing.JComboBox src = (javax.swing.JComboBox)e.getSource();

        //check if one of the te indexes is selected
        int selection = src.getSelectedIndex();
        if(preExistingJobMaxIndex>0)
        {
            //see if selection is an existing job
            if(selection>=0&&selection<=preExistingJobMaxIndex)
            {
                Integer setLine = Integer.parseInt(src.getName());
                Object[] line = (Object[])reportLines.get(setLine);
                Object[] teData = (Object[])loadedTEdata.get(selection);
                javax.swing.JTextField tid =(JTextField)line[2];
                javax.swing.JComboBox lbr = (javax.swing.JComboBox)line[3];
                tid.setText((String)teData[2]);
                lbr.setSelectedItem(teData[3]);
                tid.setEnabled(false);
                lbr.setEnabled(false);
                dReport.repaint();

            }//if selection is not an existing job re-enable task and labor fields
            else
            {
                Integer setLine = Integer.parseInt(src.getName());
                Object[] line = (Object[])reportLines.get(setLine);
                javax.swing.JTextField tid =(JTextField)line[2];
                javax.swing.JComboBox lbr = (javax.swing.JComboBox)line[3];
                tid.setEnabled(true);
                lbr.setEnabled(true);
                dReport.repaint();
            }
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgTasks = new javax.swing.ButtonGroup();
        dReport = new javax.swing.JDialog();
        bExport = new javax.swing.JButton();
        lImport = new javax.swing.JLabel();
        lExportSucess = new javax.swing.JLabel();
        tbTaskBar = new javax.swing.JToolBar();
        lTask = new javax.swing.JLabel();
        tbTask = new javax.swing.JTextField();
        bAdd = new javax.swing.JButton();
        bLoad = new javax.swing.JButton();
        bLog = new javax.swing.JButton();
        bSave = new javax.swing.JButton();
        bReport = new javax.swing.JButton();
        bClear = new javax.swing.JButton();

        dReport.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        dReport.setTitle("Report");
        dReport.setName("dReport"); // NOI18N

        bExport.setText("Export to TEWIN");
        bExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bExportActionPerformed(evt);
            }
        });

        lImport.setText("Export?   Project Number                       Task           Labor Type               Hours           Comment");

        lExportSucess.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lExportSucess.setForeground(java.awt.Color.green);
        lExportSucess.setText("Export Sucessfull");

        javax.swing.GroupLayout dReportLayout = new javax.swing.GroupLayout(dReport.getContentPane());
        dReport.getContentPane().setLayout(dReportLayout);
        dReportLayout.setHorizontalGroup(
            dReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dReportLayout.createSequentialGroup()
                .addGroup(dReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dReportLayout.createSequentialGroup()
                        .addComponent(bExport, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116)
                        .addComponent(lExportSucess))
                    .addGroup(dReportLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lImport, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(115, Short.MAX_VALUE))
        );
        dReportLayout.setVerticalGroup(
            dReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dReportLayout.createSequentialGroup()
                .addGroup(dReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bExport)
                    .addComponent(lExportSucess))
                .addGap(11, 11, 11)
                .addComponent(lImport)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        dReport.getAccessibleContext().setAccessibleParent(this);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Time Keeper");
        setAlwaysOnTop(true);
        setName("mainFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tbTaskBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tbTaskBar.setDoubleBuffered(true);

        lTask.setFont(new java.awt.Font("Arial Narrow", 0, 12));
        lTask.setText("  Task  ");
        tbTaskBar.add(lTask);

        tbTask.setFont(new java.awt.Font("Arial Narrow", 0, 14));
        tbTask.setMaximumSize(new java.awt.Dimension(150, 25));
        tbTask.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tbTaskKeyPressed(evt);
            }
        });
        tbTaskBar.add(tbTask);

        bAdd.setFont(new java.awt.Font("Arial Narrow", 1, 10));
        bAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timekeeper/ADD_16x16.png"))); // NOI18N
        bAdd.setAlignmentX(10.0F);
        bAdd.setFocusable(false);
        bAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bAdd.setPreferredSize(new java.awt.Dimension(15, 15));
        bAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAddActionPerformed(evt);
            }
        });
        tbTaskBar.add(bAdd);

        bLoad.setFont(new java.awt.Font("Arial Narrow", 1, 12));
        bLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timekeeper/LOAD_16x16.png"))); // NOI18N
        bLoad.setToolTipText("Load Record");
        bLoad.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLoadActionPerformed(evt);
            }
        });

        bLog.setFont(new java.awt.Font("Arial Narrow", 1, 12));
        bLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timekeeper/LOG_16x16.png"))); // NOI18N
        bLog.setToolTipText("Logbook");
        bLog.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLogActionPerformed(evt);
            }
        });

        bSave.setFont(new java.awt.Font("Arial Narrow", 1, 12));
        bSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timekeeper/SAVE_16x16.png"))); // NOI18N
        bSave.setToolTipText("Save Current ");
        bSave.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSaveActionPerformed(evt);
            }
        });

        bReport.setFont(new java.awt.Font("Arial Narrow", 1, 12));
        bReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timekeeper/REPORT_16x16.png"))); // NOI18N
        bReport.setToolTipText("Report");
        bReport.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bReportActionPerformed(evt);
            }
        });

        bClear.setFont(new java.awt.Font("Arial Narrow", 1, 12));
        bClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/timekeeper/CLEAR_16x16.png"))); // NOI18N
        bClear.setToolTipText("Clear Time");
        bClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bLog, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bSave, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bReport, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(bClear, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(tbTaskBar, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bLoad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bLog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbTaskBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAddActionPerformed
        addTaskButton(this.tbTask.getText(),null);
        this.tbTask.setText("");
        this.bLoad.setEnabled(false);
        this.bClear.setEnabled(true);
        this.bLog.setEnabled(true);
        this.bReport.setEnabled(true);
        this.bSave.setEnabled(true);
    }//GEN-LAST:event_bAddActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        isRunning=false;
    }//GEN-LAST:event_formWindowClosing

    private void tbTaskKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbTaskKeyPressed
        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
            bAddActionPerformed(null);
        }
    }//GEN-LAST:event_tbTaskKeyPressed

    private void bLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoadActionPerformed

        loadHistory();
        loadReportLines();

    }//GEN-LAST:event_bLoadActionPerformed

    private void bLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLogActionPerformed
        report.populateLog(log.getEvents());
        report.setVisible(true);
    }//GEN-LAST:event_bLogActionPerformed

    private void bSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSaveActionPerformed
        loadedRecordID = log.saveRecords();
        saveReport();
    }//GEN-LAST:event_bSaveActionPerformed

    private void saveReport()
    {
        DataConnection dc = new DataConnection();
        //update records that have already been saved
        //add records if new

        int records = this.reportLines.size();

        dc.connect();

        if(records>this.reportIDs.size())
        {
            //add new report lines
            for(int i = reportIDs.size();i<reportLines.size();i++)
            {
                Object[] record = (Object[])reportLines.get(i);
                javax.swing.JComboBox job = (javax.swing.JComboBox)record[1];
                javax.swing.JTextField tid = (JTextField)record[2];
                javax.swing.JComboBox lbr = (javax.swing.JComboBox)record[3];
                javax.swing.JTextField com = (JTextField)record[5];
                javax.swing.JCheckBox inc = (javax.swing.JCheckBox)record[0];

                //check if existing job was selected
                int selection = job.getSelectedIndex();

                if(preExistingJobMaxIndex>0&&(selection>0&&selection<=preExistingJobMaxIndex))
                {
                    Object[] teData = (Object[])loadedTEdata.get(selection);
                    Object[] save = new Object[]{
                        inc.isSelected(),teData[1],
                        tid.getText(),lbr.getSelectedItem().toString(),
                        com.getText()
                    };
                    dc.setTkReportValues(this.loadedRecordID,i,save);
                }else
                {
                    Object[] save = new Object[]{
                        inc.isSelected(),job.getSelectedItem().toString(),
                        tid.getText(),lbr.getSelectedItem().toString(),
                        com.getText()
                    };
                    dc.setTkReportValues(this.loadedRecordID,i,save);
                }
                
                this.reportIDs.add(i);
            }
        }else if (records>0)
        {
            //update records
            for(int j=0;j<reportIDs.size();j++)
            {
                Object[] record = (Object[])reportLines.get(j);
                javax.swing.JComboBox job = (javax.swing.JComboBox)record[1];
                javax.swing.JTextField tid = (JTextField)record[2];
                javax.swing.JComboBox lbr = (javax.swing.JComboBox)record[3];
                javax.swing.JTextField com = (JTextField)record[5];
                javax.swing.JCheckBox inc = (javax.swing.JCheckBox)record[0];

                //check if existing job was selected
                int selection = job.getSelectedIndex();

                if(preExistingJobMaxIndex>0&&(selection>0&&selection<=preExistingJobMaxIndex))
                {
                    Object[] teData = (Object[])loadedTEdata.get(selection);
                    Object[] save = new Object[]{
                        inc.isSelected(),teData[1],
                        tid.getText(),lbr.getSelectedItem().toString(),
                        com.getText()
                    };
                    dc.updateTkReportValues(this.loadedRecordID,j,save);
                }else
                {
                    Object[] save = new Object[]{
                        inc.isSelected(),job.getSelectedItem().toString(),
                        tid.getText(),lbr.getSelectedItem().toString(),
                        com.getText()
                    };
                    dc.updateTkReportValues(this.loadedRecordID,j,save);
                }
            }
        }

        dc.closeConnection();
    }

    private void bReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bReportActionPerformed

        javax.swing.JToggleButton btn;
        tasks =new ArrayList<Object>();
        times = new ArrayList<Object>();
        for(java.util.Enumeration bg = bgTasks.getElements();bg.hasMoreElements();)
        {
            btn = (javax.swing.JToggleButton)bg.nextElement();
            tasks.add(getBtnText(btn));
            String[] btnText = btn.getText().split("<br>", 2);
            String[] timeStr = btnText[1].split("<");
            times.add(timeStr[0]);
        }

        //dReport.validate();
        loadWeekTEdata();
        populateReport();
        dReport.setVisible(true);

    }//GEN-LAST:event_bReportActionPerformed

    private void bClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bClearActionPerformed
        javax.swing.JToggleButton btn;


        int n = JOptionPane.showConfirmDialog(
                this,
                "Do You Wish to Clear Log & Times?",
                "Clear Task Times",
                JOptionPane.YES_NO_OPTION);

        if(n==JOptionPane.YES_OPTION)
        {
            log.clearLog();
            report.clearLog(log.getEvents());
            int ctr = 0;
            for(java.util.Enumeration bg = bgTasks.getElements();bg.hasMoreElements();)
            {
                btn = (javax.swing.JToggleButton)bg.nextElement();
                btn.setText("<html><center>"+log.getTask(ctr)+"<br>"+"0:0:0"+"</center></html>");
                btn.setSelected(false);
                ctr++;
            }
            this.bSave.setEnabled(true);
            //set calendar to today
            now = Calendar.getInstance();

            loadedRecord = false;
            isRunning = false;
        }
    }//GEN-LAST:event_bClearActionPerformed

    private void bExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bExportActionPerformed
        //int dayKey = u.getDayKey(now.get(Calendar.DAY_OF_WEEK));
        Calendar working = (Calendar)now.clone();
        working.set(Calendar.DAY_OF_WEEK,7);
        Integer[] data = new Integer[3];
        Double[] hours = new Double[]{0.0,0.0,0.0,0.0,0.0,0.0,0.0};
        String[] comm = new String[]{"","","","","","","","","",""};

        data[1] = working.get(Calendar.WEEK_OF_YEAR);
        data[0] = working.get(Calendar.YEAR);

        DataConnection dc = new DataConnection();
        dc.connect();
        for(int i = 0; i < reportLines.size();i++)
        {
            Object[] line = (Object[])reportLines.get(i);
            javax.swing.JCheckBox inc = (javax.swing.JCheckBox)line[0];

            //check to see if line is selected to be exported
            if(inc.isSelected())
            {
                //check if line is an existing job or new job
                javax.swing.JComboBox job = (javax.swing.JComboBox)line[1];
                int selection = job.getSelectedIndex();

                javax.swing.JTextField tid = (JTextField)line[2];
                javax.swing.JComboBox lbr = (javax.swing.JComboBox)line[3];
                javax.swing.JTextField hrs = (JTextField)line[4];
                javax.swing.JTextField com = (JTextField)line[5];
                comm[2] = lbr.getSelectedItem().toString();

                if(preExistingJobMaxIndex>0&&(selection>=0&&selection<=preExistingJobMaxIndex))
                {
                    //update existing record
                    Object[] teData = (Object[])loadedTEdata.get(selection);
                    Integer ID = (Integer)teData[0];
                    Double oldHrs = u.validateHrs(teData[4].toString());
                    Double newHrs = oldHrs + u.validateHrs(hrs.getText());
                    String newCom = u.validateCom(com.getText());
                    if(newCom.isEmpty())
                        newCom = teData[5].toString();
                    this.lExportSucess.setVisible(dc.tk2teSave(ID, now.get(Calendar.DAY_OF_WEEK), newHrs, newCom));
                }else
                {
                    //add new record
                    comm[0] = job.getSelectedItem().toString().toUpperCase();
                    comm[1] = tid.getText();
                    comm[now.get(Calendar.DAY_OF_WEEK)+2] = u.validateCom(com.getText());
                    hours[now.get(Calendar.DAY_OF_WEEK)-1] = u.validateHrs(hrs.getText());
                    this.lExportSucess.setVisible(dc.setWeekData(data, hours, comm, true));
                }
            }
        }
        dc.closeConnection();
    }//GEN-LAST:event_bExportActionPerformed

    private String getBtnText(javax.swing.JToggleButton btn){
        String btnTxt;
        String[] btnTextArray1 = btn.getText().split("<br>", 2);
        String[] btnTextArray2 = btnTextArray1[0].split("<center>", 2);

        btnTxt = btnTextArray2[1];

        return btnTxt;
    }

    private void taskButtonClick(java.awt.event.ActionEvent evt){
        if(loadedRecord)
            return;

        javax.swing.JToggleButton newBtn = (javax.swing.JToggleButton)evt.getSource();

        java.util.Calendar cal = java.util.Calendar.getInstance();
        java.text.DateFormat dateFormat = new java.text.SimpleDateFormat("hh:mm:ss aa");


        //check if clicking on the same button or new. if same deselect
        if (currentTask == null){
            //First task clicked
            currentTask = newBtn;
            //log event
            log.addEvent("START " + getBtnText(currentTask) + " at " + dateFormat.format(cal.getTime()));
            log.addTrackingEvent(new Object[]{"START",log.getTaskID(getBtnText(currentTask)),
                cal.getTimeInMillis()});
            if(report.isVisible())
                report.populateLog(log.getEvents());
            updateTask();
        }
        else if(currentTask == newBtn){
            //stop task
            if(isRunning)
            {
                isRunning = false;
                try
                     {
                     updater.join();
                     // Wait for updater to finish
                 }
                catch(InterruptedException ie) {}
                catch(Exception e){
                    System.out.println(e);
                }
                log.addEvent("PAUSE " + getBtnText(currentTask) + " at " + dateFormat.format(cal.getTime()));
                log.addTrackingEvent(new Object[]{"PAUSE",log.getTaskID(getBtnText(currentTask)),
                    cal.getTimeInMillis()});
                if(report.isVisible())
                    report.populateLog(log.getEvents());
            }else
            {
                isRunning = false;
                log.addEvent("RESUME " + getBtnText(currentTask) + " at " + dateFormat.format(cal.getTime()));
                log.addTrackingEvent(new Object[]{"RESUME",log.getTaskID(getBtnText(currentTask)),
                    cal.getTimeInMillis()});
                if(report.isVisible())
                    report.populateLog(log.getEvents());
                updateTask();
            }
        }
        else{
            //Stop current task
            if(isRunning)
            {
                isRunning = false;
                try
                {
                     updater.join();
                     // Wait for updater to finish
                }
                catch(InterruptedException ie) {}
                //log stop of current task
                log.addEvent("STOP " + getBtnText(currentTask) + " at " + dateFormat.format(cal.getTime()));
                log.addTrackingEvent(new Object[]{"STOP",log.getTaskID(getBtnText(currentTask)),
                    cal.getTimeInMillis()});

            }
            //change task
            currentTask = newBtn;
            //log start of new task
            log.addEvent("START " + getBtnText(currentTask) + " at " + dateFormat.format(cal.getTime()));
            log.addTrackingEvent(new Object[]{"START",log.getTaskID(getBtnText(currentTask)),
                cal.getTimeInMillis()});
            if(report.isVisible())
                report.populateLog(log.getEvents());
            updateTask();
        }
        this.repaint();
    }

    private void addTaskButton(String task, String time){

        //Do not add empty Task
        if(task.isEmpty())
            return;

        //Create new line
        javax.swing.JToggleButton taskBtn = new javax.swing.JToggleButton();

        //Shorten button text to maximum of 24 characters
        if(task.length()>25)
            task = task.substring(0, 24);

        if(time==null)
            taskBtn.setText("<html><center>"+task+"<br>"+"0:0:0"+"</center></html>");
        else
            taskBtn.setText("<html><center>"+task+"<br>"+time+"</center></html>");
        
        taskBtn.setSize(183, 35);
        taskBtn.setFont(new java.awt.Font("Arial Narrow", 1, 14));

        this.bgTasks.add(taskBtn);
        this.add(taskBtn);

        //set button location
        java.awt.geom.Point2D p = this.tbTaskBar.getLocation();
        int x = (int)p.getX()+2;
        int y = (int)p.getY() + 38*(buttonCount+1) +35;
        taskBtn.setLocation(x,y);

        //add button to button vector
        this.buttonCount++;
        taskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                taskButtonClick(evt);
            }
        });
 
        //resize window
        int height = (int)this.getSize().getHeight() + 38;
        int width = (int)this.getSize().getWidth();
        this.setSize(width, height);

        //Add Button to list
        log.addTask(task);

        this.validate();
        //repaint();
    }

    private final Runnable displayUpdater= new Runnable()
         {
         public void run()
             {
             displayElapsedTime(System.currentTimeMillis() - TimeKeeperMain.this.startTime);
         }
     };

     private void displayElapsedTime(long elapsedTime)
         {
         String[] btnText = currentTask.getText().split("<br>", 2);
         String task = btnText[0].substring(14);

         //java.util.Date dte = new java.util.Date(elapsedTime);
         //String tmeFormat = String.format("%%0%dd", 2);
         elapsedTime = elapsedTime / 1000;
         String seconds = Long.toString(elapsedTime % 60);
         String minutes = Long.toString((elapsedTime % 3600) / 60);
         String hours = Long.toString(elapsedTime / 3600);
         String time =  hours + ":" + minutes + ":" + seconds;

         //currentTask.setText("<html><center>"+task+"<br>"+timerFormat.format(dte)+"</center></html>");
         currentTask.setText("<html><center>"+task+"<br>"+time+"</center></html>");

     }
     public void run()
         {
         try
             {
             while(isRunning)
                 {
                 SwingUtilities.invokeAndWait(displayUpdater);
                 Thread.sleep(50);
             }
         }
         catch(java.lang.reflect.InvocationTargetException ite)
             {
             ite.printStackTrace(System.err);
             // Should never happen!
         }
         catch(InterruptedException ie) {}
         // Ignore and return!
     }

     public void updateTask()
         {
         if(isRunning)
             {
             long elapsed= System.currentTimeMillis() - startTime;
             isRunning= false;
             try
                 {
                 updater.join();
                 // Wait for updater to finish
             }
             catch(InterruptedException ie) {}
             catch(Exception e){
                 System.out.println(e);
             }
             displayElapsedTime(elapsed);
             // Display the end-result
         }
         else
             {
             String[] btnText = currentTask.getText().split("<br>", 2);
             String[] timeStr = btnText[1].split("<");
             String[] longStr = timeStr[0].split(":");

             Long tempStart = Long.valueOf(longStr[0])* 3600*1000 +
                     Long.valueOf(longStr[1])*60*1000 +
                     (long)(Double.valueOf(longStr[2])* 1000);

             if(tempStart == 0)
                 startTime= System.currentTimeMillis();
             else
                 startTime = System.currentTimeMillis() - tempStart;
             isRunning= true;
             updater= new Thread(this);
             updater.start();
         }
     }

     private void loadHistory()
     {
        Object[] results = getRecordList();

        if(results == null||results.length<=0)
            return;
        
        ArrayList<Object> dates = new ArrayList<Object>();
        dates = (ArrayList<Object>)results[0];

        ArrayList<String> holder = new ArrayList<String>();
        holder = (ArrayList<String>)results[1];

        if(dates.isEmpty()||holder.isEmpty())
            return;

        String[] list = new String[holder.size()];
        holder.toArray(list);

        Object result = JOptionPane.showInputDialog(this,
                "Select Record:", "Load Record",JOptionPane.QUESTION_MESSAGE,
                null, list, list[0]);

        if(result!=null){
            if(result.toString().length()>0)
            {
                String temp = (String)result;
                String[] ID = temp.split(":");
                this.loadedRecordID = Integer.parseInt(ID[0]);
                this.loadedLogID = Integer.parseInt(ID[1]);
                temp="";
            }else
                return;
        }else
            return;

        //get selected index
        int selected=-1;
        loadedRecord = true;

        for(int i=0;i<list.length;i++)
        {
            if(result.toString().equalsIgnoreCase(list[i]))
            {
                selected = i;
                break;
            }
        }

        if(selected!=-1)
        {
            java.util.Calendar cal = (java.util.Calendar)dates.get(selected);
            this.report.setLoadedRecord(true);
            this.report.setLoadDate(cal);
            this.now = (java.util.Calendar)cal.clone();
            populateLoadedButtons();
            populateLogBook();
            this.report.populateLog();
            this.tbTask.setText("");
            this.bLoad.setEnabled(false);
            this.bClear.setEnabled(true);
            this.bLog.setEnabled(true);
            this.bReport.setEnabled(true);
            this.bSave.setEnabled(false);
        }

     }

     private void populateLogBook()
     {

         DataConnection dc = new DataConnection();
         dc.connect();
         log.setEventVector(dc.getTrackEvents(this.loadedRecordID));
         log.setLogVector(dc.getLogEvents(this.loadedRecordID,log.getTrackingEvents()));

         dc.closeConnection();
     }

     private Object[] getRecordList(){
         ArrayList<String> results = new ArrayList<String>();
         ArrayList<Object> dates = new ArrayList<Object>();
         Object[] list = new Object[2];
         DataConnection dc = new DataConnection();
         
         java.text.DateFormat dateFormat = new java.text.SimpleDateFormat("MM/dd/yyyy");

         java.sql.ResultSet rs;

         //get entries in DB
         dc.connect();
         rs = dc.getTimeKeeperRecords();

         //Populate vector
         try
         {
             int ID=0;
             int yr=0;
             int mo=0;
             int day=0;
             int logNum=0;
             while(rs.next())
             {
                ID = rs.getInt("ID");
                yr = rs.getInt("Year");
                mo = rs.getInt("Month");
                day = rs.getInt("Day");
                logNum = rs.getInt("LogNumber");
                Calendar working = Calendar.getInstance();
                working.set(Calendar.YEAR, yr);
                working.set(Calendar.MONTH, mo);
                working.set(Calendar.DAY_OF_MONTH, day);
                dates.add(working);
                results.add(Integer.toString(ID) + ":"  + Integer.toString(logNum) +
                        ":" + " Record Date - " + dateFormat.format(working.getTime()));
             }
         }catch (Exception e)
         {
             System.out.println(e);
         }

         dc.closeConnection();

         list[0] = dates;
         list[1] = results;

         return list;
     }

     private void populateLoadedButtons(){

         //verify loaded ID is valid
         if(this.loadedRecordID<0 || this.loadedLogID<0)
             return;

         DataConnection dc = new DataConnection();
         dc.connect();
         ArrayList<String> buttons = dc.getTaskButtons(this.loadedRecordID);
         ArrayList<Long> tms = dc.getTaskElapsedTime(this.loadedRecordID);
         dc.closeConnection();

         int j=0;
         for(int i=0;i<buttons.size();i++)
         {
            if(i<tms.size())
            {
                Long elapsedTime = tms.get(i) / 1000;
                String seconds = Long.toString(elapsedTime % 60);
                String minutes = Long.toString((elapsedTime % 3600) / 60);
                String hours = Long.toString(elapsedTime / 3600);
                String time =  hours + ":" + minutes + ":" + seconds;
                addTaskButton(buttons.get(i),time);
            }else
                addTaskButton(buttons.get(i),null);
            
         }


     }

     public void populateReport(){

        dReport.getContentPane().removeAll();
        dReport.getContentPane().add(this.bExport);
        dReport.getContentPane().add(this.lImport);
        dReport.getContentPane().add(this.lExportSucess);
        this.lExportSucess.setVisible(false);
        
        xdim = 15;
        //ydim = lImport.getY();
        ydim = 35;

        dReport.setSize(680,100);

        for(int i=0;i<tasks.size();i++)
        {
            if(i>=currentLines)
            {
                javax.swing.JComboBox job = u.makeJobComboBox(now.get(Calendar.YEAR), now.get(Calendar.WEEK_OF_YEAR));
                javax.swing.JTextField tid = new JTextField();
                javax.swing.JComboBox lbr = new javax.swing.JComboBox();
                javax.swing.JTextField hrs = new JTextField();
                javax.swing.JTextField com = new JTextField();
                javax.swing.JCheckBox inc = new  javax.swing.JCheckBox();

                //convert time 00:00:00 to hrs.min and populate text box
                String[] time = times.get(i).toString().split(":");
                Double tm1 = Double.parseDouble(time[0]);
                Double tm2 = Double.parseDouble(time[1])/60;
                Double tm3 = Double.parseDouble(time[2])/360;

                Double dblTime = roundTwoDecimals(tm1+tm2+tm3);
                hrs.setText(Double.toString(dblTime));

                //set comment box to task name
                com.setText(tasks.get(i).toString());

                //set job# to editable
                job.setEditable(true);

                //add current te records to job box
                for(int ctr=0;ctr<loadedTEdata.size();ctr++)
                    job.insertItemAt("Existing Job " + Integer.toString(ctr), ctr);

                //add listener for text box
                job.addActionListener(this);
                job.setName(Integer.toString(i));

                //set comment & task field blank
                tid.setText("");
                inc.setSelected(true);
                lbr.addItem("EESD Labor");
                lbr.addItem("EESD Time and Half");
                lbr.addItem("EESD Double Time");
                lbr.addItem("EESD Unassigned");
                lbr.addItem("EESD Unapplied");
                lbr.addItem("EESD Authorized");
                lbr.addItem("EESD Holiday");
                lbr.addItem("EESD Vacation");
                lbr.addItem("EESD Safety");
                lbr.addItem("EESD Training");
                lbr.addItem("EESD Marketing");
                lbr.addItem("EESD Sick");
                lbr.setSelectedIndex(0);

                //add loaded lines
                if(loadedReportLines.size()>0){
                    Object[] line = (Object[])loadedReportLines.get(i);
                    inc.setSelected((Boolean)line[0]);
                    job.addItem((String)line[1]);
                    job.setSelectedItem((String)line[1]);
                    lbr.setSelectedItem((String)line[2]);
                    tid.setText((String)line[3]);
                    com.setText((String)line[5]);
                }


                //add new task line components to panel
                dReport.getContentPane().add(inc);
                dReport.getContentPane().add(job);
                dReport.getContentPane().add(lbr);
                dReport.getContentPane().add(tid);
                dReport.getContentPane().add(hrs);
                dReport.getContentPane().add(com);

                //set component sizes
                inc.setSize(20,20);
                job.setSize(150, 20);
                lbr.setSize(120,20);
                tid.setSize(40,20);
                hrs.setSize(40, 20);
                com.setSize(200, 20);

                //ADD TO LINE VECTOR
                reportLines.add(new Object[]{inc,job,tid,lbr,hrs,com});

                //set locations
                ydim+=25;       //spacing between each task
                inc.setLocation(xdim,ydim);
                job.setLocation(xdim+45,ydim);
                tid.setLocation(xdim+200, ydim);
                lbr.setLocation(xdim+245, ydim);
                hrs.setLocation(xdim+370, ydim);
                com.setLocation(xdim+413, ydim);

                //dReport.getContentPane().validate();

                //update lincount
                currentLines++;

                //resize window
                int height = (int)dReport.getSize().getHeight() + 25;
                int width = (int)dReport.getSize().getWidth();
                dReport.setSize(width, height);
                //dReport.validate();
            }else
            {
                Object[] line = (Object[])reportLines.get(i);

                javax.swing.JComboBox job = new JComboBox();
                javax.swing.JTextField tid = new JTextField();
                javax.swing.JComboBox lbr = new javax.swing.JComboBox();
                javax.swing.JTextField hrs = new JTextField();
                javax.swing.JTextField com = new JTextField();
                javax.swing.JCheckBox inc = new  javax.swing.JCheckBox();

                hrs = (JTextField)line[4];
                job = (javax.swing.JComboBox)line[1];
                tid = (JTextField)line[2];
                lbr = (javax.swing.JComboBox)line[3];
                com = (JTextField)line[5];
                inc = (javax.swing.JCheckBox)line[0];

                //add current te records to job box
                for(int ctr=0;ctr<loadedTEdata.size();ctr++)
                    job.insertItemAt("Existing Job " + Integer.toString(ctr), ctr);

                //add listener for text box
                job.addActionListener(this);
                job.setName(Integer.toString(i));
                
                //set component sizes
                inc.setSize(20,20);
                job.setSize(150, 20);
                lbr.setSize(120,20);
                tid.setSize(40,20);
                hrs.setSize(40, 20);
                com.setSize(200, 20);
           
                //set job# to editable
                job.setEditable(true);

                //Update Times
                String[] time = times.get(i).toString().split(":");
                Double tm1 = Double.parseDouble(time[0]);
                Double tm2 = Double.parseDouble(time[1])/60;
                Double tm3 = Double.parseDouble(time[2])/360;
                
                Double dblTime = roundTwoDecimals(tm1+tm2+tm3);
                hrs.setText(Double.toString(dblTime));

                //add new task line components to panel
                dReport.getContentPane().add(inc);
                dReport.getContentPane().add(job);
                dReport.getContentPane().add(lbr);
                dReport.getContentPane().add(tid);
                dReport.getContentPane().add(hrs);
                dReport.getContentPane().add(com);

                //set locations
                ydim+=25;       //spacing between each task
                inc.setLocation(xdim,ydim);
                job.setLocation(xdim+45,ydim);
                tid.setLocation(xdim+200, ydim);
                lbr.setLocation(xdim+245, ydim);
                hrs.setLocation(xdim+370, ydim);
                com.setLocation(xdim+413, ydim);

                dReport.getContentPane().validate();

                //resize window
                int height = (int)dReport.getSize().getHeight() + 25;
                int width = (int)dReport.getSize().getWidth();
                dReport.setSize(width, height);
                dReport.repaint();
                
            }
            dReport.repaint();
        }//add next task or exit loop

        if(!loadedTEdata.isEmpty())
        {
            //add header for existing jobs
            ydim+=30;
            javax.swing.JLabel hdr1 = new javax.swing.JLabel();
            javax.swing.JLabel hdr2 = new javax.swing.JLabel();
            hdr1.setFont(new java.awt.Font("Courier New", 1, 12));
            hdr2.setFont(new java.awt.Font("Courier New", 1, 12));
            hdr1.setLocation(xdim, ydim);
            ydim+=15;
            hdr2.setLocation(xdim, ydim);

            hdr1.setText("Below is list of existing job numbers entered in TEWIN database for active date.");
            hdr2.setText("Selecting a line number as job number will add time to current line entry.");
            hdr1.setSize((int)dReport.getSize().getWidth()-4,12);
            hdr2.setSize((int)dReport.getSize().getWidth()-4,12);
            dReport.add(hdr1);
            dReport.add(hdr2);

            //Entered jobs for current week
            ydim+=25;
            int k = 0; //space counter;
            for(int j=0; j<loadedTEdata.size();j++)
            {
                String text=" ";
                javax.swing.JLabel teLine = new javax.swing.JLabel();
                teLine.setFont(new java.awt.Font("Courier New", 1, 12));
                Object[] te = (Object[])loadedTEdata.get(j);

                //add line number
                text+= Integer.toString(j);
                for(k=0;k<=3;k++)
                    text+=" ";

                //Add jobnumber and task number
                text+=(String)te[1] + "." + (String)te[2];
                for(k=text.length();k<=25;k++)
                    text+=" ";

                //Add labor type
                text+=(String)te[3];
                for(k=text.length();k<=45;k++)
                    text+=" ";

                //Add hours
                text+=(String)te[4];
                for(k=text.length();k<=50;k++)
                    text+=" ";

                //Add comment
                if(te[5]==null)
                    text+="";
                else
                    text+=(String)te[5];

                teLine.setText(text);

                dReport.getContentPane().add(teLine);
                teLine.setVisible(true);
                teLine.setLocation(xdim, ydim);
                teLine.setSize((int)dReport.getSize().getWidth()-2,12);



                dReport.getContentPane().validate();

                ydim+=20;

                //dReport.repaint();
                //dReport.validate();
                int height = (int)dReport.getSize().getHeight() + 25;
                int width = (int)dReport.getSize().getWidth();
                dReport.setSize(width, height);

            }
         }
         dReport.repaint();

    }

    private Double roundTwoDecimals(double d) {
        	java.text.DecimalFormat twoDForm = new java.text.DecimalFormat("#.##");
		return Double.valueOf(twoDForm.format(d));
    }

    private void loadReportLines()
    {
        DataConnection dc = new DataConnection();
        dc.connect();
        loadedReportLines = dc.getReportData(this.loadedRecordID);
        dc.closeConnection();
    }


    private void loadWeekTEdata()
    {
        java.sql.ResultSet rs;
        DataConnection dc = new DataConnection();
        dc.connect();
        loadedTEdata.clear();
        Calendar working = (Calendar)now.clone();
        working.set(Calendar.DAY_OF_WEEK, 7);
        rs = dc.getWeekData(working.get(Calendar.YEAR), working.get(Calendar.WEEK_OF_YEAR));
        int key = u.getDayKey(now.get(Calendar.DAY_OF_WEEK));
        try
        {
            while(rs.next())
            {
                int ID = rs.getInt("ID");
                String job = rs.getString("Job_Number");
                String tid = rs.getString("Task_ID");
                String lbr = rs.getString("Labor_Type");
                Double hrs = rs.getDouble(key);
                String sHrs = Double.toString(hrs);
                String com = rs.getString(key+1);
                loadedTEdata.add(new Object[]{ID,job,tid,lbr,sHrs,com});
            }

        }catch (Exception e)
        {
            System.out.println(e);
        }
        
        preExistingJobMaxIndex = loadedTEdata.size()-1;
        dc.closeConnection();
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TimeKeeperMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAdd;
    private javax.swing.JButton bClear;
    private javax.swing.JButton bExport;
    private javax.swing.JButton bLoad;
    private javax.swing.JButton bLog;
    private javax.swing.JButton bReport;
    private javax.swing.JButton bSave;
    private javax.swing.ButtonGroup bgTasks;
    private javax.swing.JDialog dReport;
    private javax.swing.JLabel lExportSucess;
    private javax.swing.JLabel lImport;
    private javax.swing.JLabel lTask;
    private javax.swing.JTextField tbTask;
    private javax.swing.JToolBar tbTaskBar;
    // End of variables declaration//GEN-END:variables

}
